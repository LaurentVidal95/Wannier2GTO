using ProgressMeter

"""
   real_hamiltonian_bloc(R::AsbtractVector, W‚ÇÅ::CompressedWannier, W‚ÇÇ::CompressedWannier,
                          positions::AbstractVector)

Construct the Nb√óNb tight-binding hamiltonian ``H_{\\bm{R}}`` for given vector ``R``
of the lattice. The Nb basis functions are pz-like Wannier functions of graphene with 
``Nb = 2n`` for n--layer graphene. 

The hamiltonian is given for all ``1 ‚â§ i,j ‚â§ Nb`` by:

```math
[H_{\\bm{R}}]_{ij} = \\langle W·µ¢(‚ãÖ - \\bm{R})\\,|\\, H \\,|\\, W‚±º \\rangle
```
"""
function real_hamiltonian(R::AbstractVector{T}, TB::TightBindingModel) where {T<:Real}

    Nb = length(TB.basis_functions)
    H·¥ø = zeros(T, Nb, Nb)
    S·¥ø = zeros(T, Nb, Nb)
    Z_carbon = 6 # TODO check

    # Assemble upper half
    for (i, W·µ¢) in enumerate(TB.basis_functions)
        W·µ¢·¥ø = translate(W·µ¢, -R)
        for (j, W‚±º) in enumerate(TB.basis_functions[i:end])
            H·¥ø[i,(j-1)+i] = hamiltonian_scalar_prod(TB, W·µ¢·¥ø, W‚±º)
            S·¥ø[i,(j-1+i)] = integral(W·µ¢·¥ø, W‚±º; type=:overlap)
        end
    end

    # Deduce lower half by symmetry
    for i in 1:Nb
        for j in i+1:Nb
            H·¥ø[j,i] = H·¥ø[i,j]
            S·¥ø[j,i] = S·¥ø[i,j]
        end
    end

    Symmetric(H·¥ø), Symmetric(S·¥ø)
end

# Time consuming part
function real_hamiltonian(TB::TightBindingModel, atomic_positions::AbstractVector)
    Rs_cart = R_vectors_cart(TB)    
    T = eltype(Rs_cart[1])
    NR = length(Rs_cart)
    Nb = length(TB.basis_functions)

    ‚Ñç·¥ø = zeros(T, Nb, Nb, NR)
    ùïä·¥ø = zeros(T, Nb, Nb, NR)

    progress = Progress(length(Rs_cart), desc="Computing all blocs")
    for (iR, R) in enumerate(Rs_cart)
        H·¥ø, S·¥ø = real_hamiltonian(R, TB.basis_functions, atomic_positions)
        ‚Ñç·¥ø[:,:,iR] .= H·¥ø
        ùïä·¥ø[:,:,iR] .= S·¥ø
        next!(progress)
    end
    ‚Ñç·¥ø, ùïä·¥ø
end

function bloch_transform(kpoints::Vector{Vector{T}}, TB::TightBindingModel,
                         ùïÜ·¥ø::Array{T,3}) where {T<:Real}
    Nb = size(ùïÜ·¥ø)[1]
    Nk = length(kpoints)
    @assert size(ùïÜ·¥ø)[1] == size(ùïÜ·¥ø)[2]

    R_vectors = TB.R_vectors
    R_basis = [W.center for W in TB.basis_functions]

    ùïÜ·µè = zeros(Complex{T}, Nb, Nb, Nk)
    for (ik, k) in enumerate(kpoints)
        for (iR, R) in enumerate(R_vectors)
            prefac = [cis(-2œÄ*dot(R .+ R·µ¢ .-R‚±º, k)) for R·µ¢ in R_basis, R‚±º in R_basis]
            ùïÜ·µè[:,:,ik] .+= prefac .* @view ùïÜ·¥ø[:,:,iR]
        end
    end
    ùïÜ·µè
end
